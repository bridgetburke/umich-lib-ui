module.exports = /* eslint-disable */ [{"name":"Alert","description":"","props":{"intent":{"type":{"name":"enum","value":[{"value":"'informational'","computed":false},{"value":"'error'","computed":false},{"value":"'warning'","computed":false},{"value":"'success'","computed":false},{"value":"'none'","computed":false}]},"required":false,"description":"","defaultValue":{"value":"'informational'","computed":false}},"onCloseButtonClick":{"type":{"name":"func"},"required":false,"description":"","defaultValue":{"value":"() => {}","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":""},"closeable":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"true","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'umich-lib-components-react'\nimport classNames from 'classnames';\nimport './Alert.css'\n\nclass Alert extends React.Component {\n  state = {\n    open: true\n  }\n\n  handleClose = () => {\n    this.setState({ open: false })\n    this.props.onCloseButtonClick()\n  }\n\n  render() {\n    const {\n      intent,\n      className,\n      closeable,\n      children\n    } = this.props\n\n    const alertClasses = classNames({\n      'alert': true,\n      'alert--informational': intent === 'informational',\n      'alert--success': intent === 'success',\n      'alert--warning': intent === 'warning',\n      'alert--error': intent === 'error'\n    }, className);\n\n    if (this.state.open) {\n      return (\n        <div className={alertClasses}>\n          <div className=\"alert-inner\">\n            <div className=\"alert-message\">{children}</div>\n\n            {closeable && (\n              <Button\n                onClick={this.handleClose}\n                className=\"alert-dismiss-button\"\n                kind=\"tertiary\"\n                small={true}\n              >\n                Close\n              </Button>\n            )}\n\n          </div>\n        </div>\n      )\n    }\n\n    return null\n  }\n}\n\nAlert.propTypes = {\n  intent: PropTypes.oneOf([\n    'informational',\n    'error',\n    'warning',\n    'success',\n    'none'\n  ]),\n  onCloseButtonClick: PropTypes.func,\n  className: PropTypes.string,\n  closeable: PropTypes.bool\n};\n\nAlert.defaultProps = {\n  intent: 'informational',\n  onCloseButtonClick: () => {},\n  closeable: true\n};\n\nexport default Alert\n","examples":[{"name":"Alert","code":"<div className=\"y-spacing\">\n  <Alert intent=\"warning\">Don't do it!</Alert>\n  <Alert intent=\"success\">You did it!</Alert>\n  <Alert intent=\"error\">It's too late.</Alert>\n  <Alert intent=\"informational\">Hello there</Alert>\n  <Alert intent=\"none\"><p>We're not sure. <a href=\"#\">What about html?</a></p></Alert>\n</div>"}],"docs":["Alerts notify users of important information!\n\n<Alert>Does this work?</Alert>\n\nThis content is from a MD file.\n"]},{"name":"Button","description":"Use buttons to move though a transaction, aim to use only one button per page.","props":{"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"disabled":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"small":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"kind":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'primary'","computed":false},{"value":"'secondary'","computed":false},{"value":"'tertiary'","computed":false}]},"required":false,"description":"","defaultValue":{"value":"'primary'","computed":false}},"href":{"type":{"name":"string"},"required":false,"description":""},"type":{"type":{"name":"enum","value":[{"value":"'button'","computed":false},{"value":"'reset'","computed":false},{"value":"'submit'","computed":false}]},"required":false,"description":"","defaultValue":{"value":"'button'","computed":false}}},"code":"import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './Button.css'\n\n/**\n  Use buttons to move though a transaction, aim to use only one button per page.\n*/\nconst Button = ({\n  children,\n  href,\n  disabled,\n  className,\n  kind,\n  type,\n  small,\n  ...other\n}) => {\n  const buttonClasses = classNames({\n    'button': true,\n    'button--small': small,\n    'button--start': kind === 'start',\n    'button--primary': kind === 'primary',\n    'button--secondary': kind === 'secondary',\n    'button--tertiary': kind === 'tertiary',\n  }, className);\n\n  const commonProps = {\n    className: buttonClasses,\n  };\n\n  const button = (\n    <button {...other} {...commonProps} disabled={disabled} type={type}>\n      {children}\n    </button>\n  );\n\n  const anchor = (\n    <a {...other} {...commonProps} href={href} role=\"button\">\n      {children}\n    </a>\n  );\n\n  return href ? anchor : button;\n}\n\nButton.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  small: PropTypes.bool,\n  kind: PropTypes.oneOf([\n    'start',\n    'primary',\n    'secondary',\n    'tertiary',\n  ]).isRequired,\n  href: PropTypes.string,\n  type: PropTypes.oneOf(['button', 'reset', 'submit']),\n};\n\nButton.defaultProps = {\n  type: 'button',\n  disabled: false,\n  small: false,\n  kind: 'primary',\n};\n\nexport default Button;\n","examples":[{"name":"Button","code":"<ul className=\"y-spacing\">\n  <li>\n    <Button kind=\"start\">Most important</Button>\n  </li>\n  <li>\n    <Button>Standard</Button>\n  </li>\n  <li>\n    <Button kind=\"secondary\">Maybe</Button>\n  </li>\n  <li>\n    <Button kind=\"tertiary\">Probably not</Button>\n  </li>\n  <li>\n    <Button small kind=\"primary\">Small is possible</Button>\n  </li>\n</ul>"}],"docs":[]},{"name":"Expandable","description":"","props":{"expanded":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Expandable.css'\n\nconst ExpandableContext = React.createContext();\n\nclass Expandable extends Component {\n  state = {\n    expanded: false,\n    toggleExpanded: () => {\n      this.setState({\n        expanded: !this.state.expanded\n      })\n    },\n    disabled: false,\n    disable: () => {\n      this.setState({\n        disabled: true\n      })\n    }\n  }\n\n  render() {\n    return (\n      <ExpandableContext.Provider value={this.state}>\n        {this.props.children}\n      </ExpandableContext.Provider>\n    )\n  }\n}\n\nExpandable.propTypes = {\n  expanded: PropTypes.bool,\n  disabled: PropTypes.bool\n};\n\nExpandable.defaultProps = {\n  expanded: false\n};\n\nexport default Expandable\nexport {\n  ExpandableContext\n}\n","examples":[{"name":"Expandable","code":"() => {\n  const colors = [ \"Red\", \"Orange\", \"Yellow\", \"Green\", \"Cyan\", \"Blue\", \"Indigo\", \"Violet\", \"Purple\", \"Magenta\", \"Pink\", \"Brown\", \"White\", \"Gray\", \"Black\"]\n  \n  return (\n    <Expandable>\n      <ul>\n        <ExpandableChildren show={3}>\n          {colors.map((color, key) => <li key={key}>{color}</li>)}\n        </ExpandableChildren>\n      </ul>\n\n      <ExpandableButton\n        kind=\"tertiary\"\n        name=\"colors\"\n        count={colors.length}\n      />\n    </Expandable>\n  )\n}"}],"docs":[]},{"name":"Header","description":"","props":{"name":{"type":{"name":"string"},"required":false,"description":""},"siteUrl":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'/'","computed":false}},"renderAnchor":{"type":{"name":"func"},"required":false,"description":""},"nav":{"type":{"name":"array"},"required":false,"description":""}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Header.css'\n\nimport UMichBlockM from './UMichBlockM'\nimport UMichLibrary from './UMichLibrary'\n\nconst NavItem = ({\n  item,\n  renderAnchor\n}) => {\n  if (item.href) {\n    return (\n      <a href={item.href}>{ item.text }</a>\n    )\n  }\n\n  if (item.to) {\n    return (\n      renderAnchor(item)\n    )\n  }\n}\n\nconst Header = ({\n  name,\n  siteUrl,\n  nav,\n  renderAnchor\n}) => {\n  return (\n    <header className=\"header\">\n      <div className=\"header__inner\">\n        <div className=\"logo\">\n          <a href=\"https://umich.edu/\" className=\"logo__blockm\"><UMichBlockM className=\"logo__svg\" /></a>\n          <a href=\"https://www.lib.umich.edu/\" className=\"logo__library\"><UMichLibrary className=\"logo__svg\" /></a>\n          {name && siteUrl && (<a href={siteUrl} className=\"logo__site-name-link\">{name}</a>)}\n        </div>\n\n        {nav && nav.length && (\n          <nav className=\"header__nav\">\n            <ul className=\"header__nav-list\">\n              {nav.map((item, key) => (\n                <li key={key} className=\"header__nav-list-item\"><NavItem item={item} renderAnchor={renderAnchor} /></li>\n              ))}\n            </ul>\n          </nav>\n        )}\n      </div>\n    </header>\n  )\n}\n\nHeader.propTypes = {\n  name: PropTypes.string,\n  siteUrl: PropTypes.string,\n  renderAnchor: PropTypes.func,\n  nav: PropTypes.array\n};\n\nHeader.defaultProps = {\n  siteUrl: '/',\n};\n\nexport default Header\n","examples":[{"name":"Header","code":"<Header\n  name=\"App\"\n  siteUrl=\"#\"\n  renderAnchor={(data) => (\n    <a href={data.to}>{data.text}</a>\n  )}\n  nav={[\n    { text: 'About', to: '/about' },\n    { text: 'My Account', href: 'https://www.lib.umich.edu/my-account/' }\n  ]}\n/>"}],"docs":[]},{"name":"Heading","description":"","props":{"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"level":{"type":{"name":"enum","value":[{"value":"1","computed":false},{"value":"2","computed":false},{"value":"3","computed":false},{"value":"4","computed":false},{"value":"5","computed":false},{"value":"6","computed":false}]},"required":false,"description":"","defaultValue":{"value":"1","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'xsmall'","computed":false},{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false},{"value":"'xlarge'","computed":false}]},"required":false,"description":"","defaultValue":{"value":"'small'","computed":false}}},"code":"import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './Heading.css'\n\nconst Heading = ({\n  children,\n  size,\n  level,\n  className,\n  ...other\n}) => {\n  \n  \n  const headingClasses = classNames({\n    'heading': true,\n    [`heading--${size}`]: true\n  }, className);\n  \n  const HeadingTag = `h${level}`\n\n  return (\n    <HeadingTag className={headingClasses}>{children}</HeadingTag>\n  )\n}\n\nHeading.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  level: PropTypes.oneOf([1,2,3,4,5,6]),\n  size: PropTypes.oneOf([\n    'xsmall',\n    'small',\n    'medium',\n    'large',\n    'xlarge',\n  ]).isRequired\n};\n\nHeading.defaultProps = {\n  level: 1,\n  size: 'small'\n};\n\nexport default Heading;\n","examples":[{"name":"Heading","code":"<Heading size=\"medium\" level={2}>Hello World</Heading>"}],"docs":[]},{"name":"Icon","description":"","props":{"icon":{"type":{"name":"string"},"required":true,"description":""},"size":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"16","computed":false}},"title":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './Icon.css'\nimport icons from './icons'\n\nconst Icon = ({\n  icon,\n  size,\n  title,\n  className\n}) => {\n  if (!icons.hasOwnProperty(icon)) {\n    console.warn(`[Icon] \"${icon}\" is not a valid icon name.`)\n  }\n\n  const styles = {\n    svg: {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n    }\n  };\n\n  const iconClasses = classNames({\n    'icon': true,\n  }, className);\n\n  return (\n    <svg\n      style={styles.svg}\n      width={`${size}px`}\n      height={`${size}px`}\n      viewBox=\"0 0 48 48\"\n      className={iconClasses}\n    >\n      {title && <title>{title}</title>}\n      <path\n        style={styles.path}\n        d={icons[icon]}\n      ></path>\n    </svg>\n  )\n}\n\nIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n  size: PropTypes.number,\n  title: PropTypes.string\n}\n\nIcon.defaultProps = {\n  size: 16,\n};\n\nexport default Icon\n","examples":[{"name":"Icon","code":"<div className=\"y-spacing\">\n  <Icon icon=\"error\" size={64} />\n\n  <ul className=\"y-spacing\">\n    {Object.keys(icons).map(i => (\n      <li>\n        <Icon icon={i} size={24} className=\"margin-right-half\"/>\n        {i}\n      </li>\n    ))}\n  </ul>\n</div>"}],"docs":[]},{"name":"RecordFields","description":"","props":{"fields":{"type":{"name":"array"},"required":true,"description":""},"renderAnchor":{"type":{"name":"func"},"required":false,"description":""},"full":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './RecordFields.css'\n\nconst FieldDescription = ({ desc, renderAnchor }) => {\n  if (Array.isArray(desc)) {\n    return (\n      <ol className=\"field-nested\">\n        {desc.map((nestedDesc, i) => (\n          <li className=\"field-nested__desc\" key={i}>\n            <FieldDescription desc={nestedDesc} renderAnchor={renderAnchor} />\n          </li>\n        ))}\n      </ol>\n    )\n  }\n\n  if (desc.href) {\n    return (\n      <a href={desc.href}>{ desc.text }</a>\n    )\n  }\n\n  if (desc.to) {\n    return (\n      renderAnchor(desc)\n    )\n  }\n\n  return desc.text\n}\n\nconst Field = ({ field, renderAnchor }) => {\n  const { term, description } = field\n\n  return (\n    <div className=\"record-fields__field\">\n      <dt className=\"record-fields__term\">{term}</dt>\n      <dd className=\"record-fields__description\">\n        {description.map((desc, i) => (\n          <span className=\"record-fields__description-item\" key={i}>\n            <FieldDescription desc={desc} renderAnchor={renderAnchor} />\n          </span>\n        ))}\n      </dd>\n    </div>\n  )\n}\n\nconst RecordFields = ({\n  fields,\n  renderAnchor,\n  full\n}) => {\n  const RecordFieldsClasses = classNames({\n    'record-fields': true,\n    'record-fields--full': full ? true : false\n  });\n\n  return (\n    <dl className={RecordFieldsClasses}>\n      {fields.map((field, i) => (\n        <Field field={field} renderAnchor={renderAnchor} key={i} />\n      ))}\n    </dl>\n  )\n}\n\nRecordFields.propTypes = {\n  fields: PropTypes.array.isRequired,\n  renderAnchor: PropTypes.func,\n  full: PropTypes.bool\n};\n\nexport default RecordFields\n","examples":[{"name":"RecordFields","code":"() => {\n  const fields = [\n    {\n      term: \"Published\",\n      description: [{ text: \"2012 - Carlton, Vic. : BirdLife Australia\" }]\n    },\n    {\n      term: \"Previous Title\",\n      description: [\n        { text: \"Wing span (Melbourne, Vic.)\", to: \"#\" },\n        { text: \"Bird observer (Hawthorn, Vic.)\", to: \"#\" }\n      ]\n    },\n    {\n      term: \"Source of Description Note\",\n      description: [\n        { text: \"Description based on: Vol. 1, no. 1 (Mar. 2012); title from cover.\" },\n        { text: \"Latest issue consulted: Vol. 1, no. 3 (Sept. 2012).\" }\n      ]\n    },\n    {\n      term: \"Academic Discipline\",\n      description: [\n        [\n          { text: \"Science\", to: \"#\" },\n          { text: \"Biology\", to: \"#\" },\n          { text: \"Zoology\", to: \"#\" }\n        ],\n        [\n          { text: \"Science\", to: \"#\" },\n          { text: \"Biology\", to: \"#\" },\n          { text: \"Ecology and Evolutionary Biology\", to: \"#\" }\n        ],\n        [\n          { text: \"International Studies\", to: \"#\" },\n          { text: \"Asian Studies\", to: \"#\" },\n          { text: \"Pacific/Australia/New Zealand Studies\", to: \"#\" }\n        ]\n      ]\n    }\n  ]\n  \n  return (\n    <RecordFields\n      fields={fields}\n      full\n      renderAnchor={data => (\n        <a className=\"rendered-prop-anchor-example\" href={data.to}>\n        {data.text}\n        </a>\n      )}\n    />\n  )\n}"}],"docs":[]},{"name":"ResourceAccess","description":"","props":{"caption":{"type":{"name":"string"},"required":false,"description":""},"captionLink":{"type":{"name":"shape","value":{"text":{"name":"string","required":false},"href":{"name":"string","required":false}}},"required":false,"description":""},"notes":{"type":{"name":"array"},"required":false,"description":""},"headings":{"type":{"name":"array"},"required":true,"description":""},"rows":{"type":{"name":"array"},"required":true,"description":""},"name":{"type":{"name":"string"},"required":false,"description":""},"count":{"type":{"name":"bool"},"required":false,"description":""},"renderAnchor":{"type":{"name":"func"},"required":false,"description":"Links that use 'to' will use this renderAnchor prop. This is useful if you want to use React Router for example."}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport {\n  Icon,\n  Expandable,\n  ExpandableChildren,\n  ExpandableButton\n} from 'umich-lib-components-react'\n\nimport './ResourceAccess.css'\n\n\nconst Cell = ({\n  cell,\n  renderAnchor\n}) => {\n  return (\n    <React.Fragment>\n      {cell.icon && (<Icon icon={cell.icon} className=\"margin-right-quarter\" />)}\n\n      {(() => {\n        if (cell.href) {\n          return (<a href={cell.href}>{cell.text}</a>)\n        }\n\n        if (cell.to) {\n          return (renderAnchor(cell))\n        }\n\n        if (cell.html) {\n          return <span className=\"resource-access__cell-html\" dangerouslySetInnerHTML={{ __html: cell.html }} />\n        }\n\n        return (<React.Fragment>{cell.text}</React.Fragment>)\n      })()}\n    </React.Fragment>\n  )\n}\n\nclass ResourceAccess extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      tabindex: null\n    }\n    this.captionId = 'caption-' + Math.random().toString(36).substr(2, 9);\n    this.containerRef = React.createRef();\n  }\n\n  componentDidMount() {\n    let container = this.containerRef.current\n    let scrollable = container.scrollWidth > container.clientWidth;\n    this.setState({\n      tabindex: scrollable ? '0' : null\n    });\n  }\n\n  getCellClassNames = (cell) => {\n    const cellClassNames = classNames({\n      'resource-access__cell': true,\n      'resource-access__cell--success': cell.intent === 'success',\n      'resource-access__cell--warning': cell.intent === 'warning',\n      'resource-access__cell--error': cell.intent === 'error',\n    });\n\n    return cellClassNames\n  }\n\n  render() {\n    const {\n      caption,\n      notes,\n      captionLink,\n      headings,\n      rows,\n      count,\n      name,\n      renderAnchor\n    } = this.props\n\n    return (\n      <div\n        className=\"resource-access__container\"\n        tabIndex={this.state.tabindex}\n        aria-labelledby={this.captionId}\n        ref={this.containerRef}\n        role=\"group\"\n      >\n        <Expandable>\n          <table className=\"resource-access__table\">\n            {caption && (\n              <caption id={this.captionId} className=\"resource-access__caption\">\n                <span className=\"resource-access__caption-text\">{caption}</span>\n                {captionLink && (<a href={captionLink.href} className=\"resource-access__caption-link\">{captionLink.text}</a>)}\n                {notes && (\n                  <React.Fragment>\n                    {notes.map((note, n) => <span key={n} className=\"resource-access__caption-note\">{note}</span>)}\n                  </React.Fragment>\n                )}\n                {this.state.tabindex === '0' && <small className=\"resource-access__caption-scroll-text\">(scroll to see more)</small>}\n              </caption>\n            )}\n\n            <thead>\n              <tr>\n                {headings.map((heading, i) => (\n                  <th scope=\"col\" key={i}>{heading}</th>\n                ))}\n              </tr>\n            </thead>\n\n            <tbody>\n              <ExpandableChildren show={1}>\n                {rows.map((row, i) => (\n                  <tr key={i}>\n                    {row.map((cell, t) => (\n                      <td key={t} className={this.getCellClassNames(cell)}>\n                        <Cell cell={cell} renderAnchor={renderAnchor} />\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </ExpandableChildren>\n            </tbody>\n          </table>\n\n          <ExpandableButton kind=\"tertiary\" small={true} count={count ? rows.length : ''} name={name} />\n        </Expandable>\n      </div>\n    )\n  }\n}\n\nResourceAccess.propTypes = {\n  caption: PropTypes.string,\n  captionLink: PropTypes.shape({\n    text: PropTypes.string,\n    href: PropTypes.string\n  }),\n  notes: PropTypes.array,\n  headings: PropTypes.array.isRequired,\n  rows: PropTypes.array.isRequired,\n  name: PropTypes.string,\n  count: PropTypes.bool,\n\n  /** Links that use 'to' will use this renderAnchor prop. This is useful if you want to use React Router for example. */\n  renderAnchor: PropTypes.func,\n};\n\nexport default ResourceAccess\n","examples":[{"name":"ResourceAccess","code":"<ResourceAccess\n  caption={\"HathiTrust Digital Library\"}\n  headings={[\"Link\", \"Description\", \"Source\"]}\n  rows={[\n    [\n      { text: \"Search only (no full text)\", href: \"http://hdl.handle.net/2027/mdp.39015055430386\" },\n      { text: \"no.1-3 1944-1945\" },\n      { text: \"University of Michigan\" }\n    ],\n    [\n      { text: \"Get this\", to: \"http://hdl.handle.net/2027/mdp.39015055430394\" },\n      { text: \"no.4-6 19uu\" },\n      { text: \"University of Michigan\" }\n    ]\n  ]}\n  renderAnchor={data => (\n    <a className=\"rendered-prop-anchor-example\" href={data.to}>\n      {data.text}\n    </a>\n  )}\n  name={\"HathiTrust Sources\"}\n  count={true}\n/>"}],"docs":[]}]